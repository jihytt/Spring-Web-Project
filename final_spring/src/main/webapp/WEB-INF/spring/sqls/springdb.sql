-- MEMBER
DROP SEQUENCE MEMBERSEQ;
DROP TABLE MEMBER

CREATE SEQUENCE MEMBERSEQ;
CREATE TABLE MEMBER(
   MEMBER_NO NUMBER PRIMARY KEY,
   MEMBER_NAME VARCHAR2(20) NOT NULL,
   MEMBER_ID VARCHAR2(20) NOT NULL UNIQUE,
   MEMBER_PW VARCHAR2(20) NOT NULL,
   MEMBER_EMAIL VARCHAR2(50) NOT NULL,
   MEMBER_PHONE VARCHAR2(20) NOT NULL,
   MEMBER_ADDR VARCHAR2(300) NOT NULL,
   MEMBER_PIC VARCHAR2(3000),
   MEMBER_ROLE NUMBER NOT NULL CHECK(MEMBER_ROLE IN(0,1)), -- 관리자 0 , 회원 1
   MEMBER_DELETE NUMBER NOT NULL CHECK(MEMBER_DELETE IN(0,1)), -- 가입중 0 , 탈퇴 1
   MEMBER_SOCIALID VARCAHR2(50),
   SESSIONKEY VARCHAR2(50) DEFAULT 'NONE',
   SESSIONLIMIT TIMESTAMP
   );

--

-- BOARD
DROP SEQUENCE BOARDSEQ;
DROP TABLE BOARD;

CREATE SEQUENCE BOARDSEQ;
CREATE TABLE BOARD(
    BOARD_NO NUMBER PRIMARY KEY,
    BOARD_CATEGORY VARCHAR2(30) NOT NULL CHECK (BOARD_CATEGORY IN ('정보안내', '소모임', '공지', '문의')),
    BOARD_ID VARCHAR2(20) NOT NULL,
    BOARD_TITLE VARCHAR2(100) NOT NULL,
    BOARD_CONTENT LONG NOT NULL,
    BOARD_DATE DATE NOT NULL,
    BOARD_VIEWS NUMBER,
    BOARD_SECRET VARCHAR2(10),
    BOARD_PRICE NUMBER,
    BOARD_PRODNO NUMBER,
    BOARD_GROUPNO NUMBER,
    BOARD_GROUP NUMBER,
    MEMBER_NO NUMBER NOT NULL,
    CONSTRAINT BOARD_FK1 FOREIGN KEY(MEMBER_NO) REFERENCES MEMBER(MEMBER_NO) ON DELETE CASCADE,
    CONSTRAINT BOARD_FK2 FOREIGN KEY(BOARD_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
); 


SELECT * FROM BOARD
--

-- REPLY
DROP SEQUENCE REPLYSEQ;
DROP TABLE REPLY;

CREATE SEQUENCE REPLYSEQ;
CREATE TABLE REPLY(
   REPLY_NO NUMBER NOT NULL PRIMARY KEY,                                 
   BOARD_NO NUMBER NOT NULL,              
   BOARD_CATEGORY VARCHAR2(30) NOT NULL CHECK (BOARD_CATEGORY IN ('정보안내', '소모임', '문의', '공지')), 
   REPLY_ID VARCHAR2(20) NOT NULL,     
   REPLY_CONTENT VARCHAR2(1000) NOT NULL,                                 
   REPLY_DATE DATE NOT NULL,
   CONSTRAINT REPLY_FK1 FOREIGN KEY(BOARD_NO) REFERENCES BOARD(BOARD_NO) ON DELETE CASCADE,
   CONSTRAINT REPLY_FK2 FOREIGN KEY(REPLY_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

SELECT * FROM REPLY;
--


-- FUNDING
DROP SEQUENCE FUNDINGSEQ;
DROP TABLE FUNDING;

CREATE SEQUENCE FUNDINGSEQ;
CREATE TABLE FUNDING(
	FUNDING_NO NUMBER PRIMARY KEY,
	FUNDING_PIC VARCHAR2(3000) NOT NULL,
	FUNDING_TITLE VARCHAR2(50) NOT NULL,
	FUNDING_CONTENT LONG NOT NULL,
	FUNDING_FILTER VARCHAR2(100) NOT NULL,
	FUNDING_START VARCHAR2(30) NOT NULL,
	FUNDING_END VARCHAR2(30) NOT NULL,
	FUNDING_TA NUMBER NOT NULL,
	FUNDING_CA NUMBER NOT NULL,
	FUNDING_PAY NUMBER NOT NULL,
	FUNDING_PAYDESC VARCHAR2(50) NOT NULL
);

SELECT * FROM FUNDING
--

-- EVENT
DROP SEQUENCE EVENTSEQ;
DROP TABLE EVENT;

CREATE SEQUENCE EVENTSEQ;
CREATE TABLE EVENT(
	EVENT_NO NUMBER PRIMARY KEY,
	EVENT_TITLE VARCHAR2(50) NOT NULL,
	EVENT_CONTENT LONG NOT NULL,
	EVENT_START VARCHAR2(50) NOT NULL,
	EVENT_END VARCHAR2(50) NOT NULL
);

SELECT * FROM EVENT;
--

--

-- PAYMENT
DROP SEQUENCE PAYMENTSEQ;
DROP TABLE PAYMENT;

CREATE SEQUENCE PAYMENTSEQ;
CREATE TABLE PAYMENT(
	PAY_NUM NUMBER PRIMARY KEY,
	PAY_PRODUCT VARCHAR2(50) NOT NULL,
	PAY_CATEGORY VARCHAR2(20) NOT NULL CHECK (PAY_CATEGORY IN ('상품판매', '회원거래', '펀딩')),
	PAY_STATUS VARCHAR2(20) NOT NULL CHECK (PAY_STATUS IN ('결제완료', '결제취소대기', '결제취소')),
	PAY_BUYER NUMBER NOT NULL,
	PAY_PRODUCTER VARCHAR2(20) NOT NULL,
	PAY_DATE DATE NOT NULL,
	FUNDING_NO NUMBER,
	CONSTRAINT PAYMENT_FK FOREIGN KEY(PAY_BUYER) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
	CONSTRAINT PAYMENT_FK2 FOREIGN KEY(FUNDING_NO) REFERENCES FUNDING(FUNDING_NO) ON DELETE CASCADE
);

SELECT * FROM PAYMENT;
--

-- MESSAGE
DROP SEQUENCE MESSAGESEQ;
DROP TABLE MESSAGE;

CREATE SEQUENCE MESSAGESEQ;
CREATE TABLE MESSAGE(
	MESSAGE_NO NUMBER PRIMARY KEY,	
	MESSAGE_SENDID VARCHAR2(20) NOT NULL,
	MESSAGE_RECVID VARCHAR2(20) NOT NULL,
	MESSAGE_CONTENT VARCHAR2(3000) NOT NULL,
	MESSAGE_SENDDATE DATE NOT NULL,
	MESSAGE_READDATE DATE,
	MESSAGE_TYPE VARCHAR2(20) NOT NULL,
	CONSTRAINT SENDID_FK FOREIGN KEY(MESSAGE_RECVID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE,
	CONSTRAINT RECVID_FK FOREIGN KEY(MESSAGE_SENDID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

SELECT * FROM MESSAGE;
--
     
-- CHATROOM
DROP SEQUENCE CHATROOMSEQ;
DROP TABLE CHATROOM;

CREATE SEQUENCE CHATROOMSEQ;
CREATE TABLE CHATROOM (
	ROOM_NO NUMBER PRIMARY KEY,
	ROOM_NAME VARCHAR2(1000) NOT NULL UNIQUE,
	CREATOR_NAME VARCHAR2(1000) NOT NULL,
	CREATE_DATE DATE NOT NULL,
	ROOM_DELETE NUMBER NOT NULL,
	CREATOR_NO NUMBER NOT NULL,
	BOARD_NO NUMBER NOT NULL,
	CONSTRAINT CHATROOM_FK FOREIGN KEY(CREATOR_NO) REFERENCES MEMBER(MEMBER_NO) ON DELETE CASCADE,
	CONSTRAINT CHATROOM_FK2 FOREIGN KEY(BOARD_NO) REFERENCES BOARD(BOARD_NO) ON DELETE CASCADE
);

SELECT * FROM CHATROOM;
--

-- CHATMESSAGE
DROP SEQUENCE CHARMESSAGESEQ;
DROP TABLE CHATMESSAGE;

CREATE SEQUENCE CHATMESSAGESEQ;
CREATE TABLE CHATMESSAGE (
	CHAT_NO NUMBER PRIMARY KEY,
	MESSAGE VARCHAR2(2000),
	CHAT_DATE DATE NOT NULL,
	ROOM_NO  NUMBER NOT NULL,
	CHAT_ID VARCHAR2(20) NOT NULL,
	CONSTRAINT CHATMESSAGE_FK FOREIGN KEY(ROOM_NO) REFERENCES CHATROOM(ROOM_NO) ON DELETE CASCADE
	CONSTRAINT CHATMESSAGE_FK FOREIGN KEY(CHAT_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE
);

SELECT * FROM CHATMESSAGE;
--
SELECT * FROM ALL_ALL_TABLES;